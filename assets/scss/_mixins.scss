// Style
@mixin shadow($color, $intensity) {
  box-shadow: .15rem .15rem .25rem 0 rgba($color, $intensity);
}

//clamp
@mixin clamp($property, $axis, $values) {
  $list: split-str($values, ',');
  $min: nth($list, 1);
  $max: nth($list, 2);

  @if $axis == 'x' {
    #{$property}: 0 unquote("clamp(#{$min} * 1rem, calc(#{$min} * 1rem + (#{$max} - #{$min}) * #{$calcWidth}), #{$max} * 1rem)");
  } @else if $axis == 'y' {
    #{$property}: unquote("clamp(#{$min} * 1rem, calc(#{$min} * 1rem + (#{$max} - #{$min}) * #{$calcWidth}), #{$max} * 1rem)") 0;
  } @else {
    #{$property}: unquote("clamp(#{$min} * 1rem, calc(#{$min} * 1rem + (#{$max} - #{$min}) * #{$calcWidth}), #{$max} * 1rem)");
  }
}

//flex
@mixin flex($direction, $justify, $align) {
  display: flex;
  @if $direction {
    flex-direction: $direction;
  } @if $justify {
    justify-content: $justify;
  } @if $align {
    align-items: $align;
  }
}

//mediaQueries
@mixin media-queries-up($name, $breakpoints: $gridBreakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-queries-down($name, $breakpoints: $gridBreakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-queries-only($name, $breakpoints: $gridBreakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  $max: breakpoint-max($name, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($name, $breakpoints) {
      @content;
    }
  }
}

//generate
@mixin config($prefix, $property, $sizes, $spacing) {
  .#{$prefix} {
    @for $i from 1 through length($sizes) {
      $size: nth($sizes, $i);

      &l-#{$i - 1} {
        #{$property}-left: $spacing * $size;
      }
      &t-#{$i - 1} {
        #{$property}-top: $spacing * $size;
      }
      &r-#{$i - 1} {
        #{$property}-right: $spacing * $size;
      }
      &b-#{$i - 1} {
        #{$property}-bottom: $spacing * $size;
      }
      &x-#{$i - 1} {
        #{$property}: 0 $spacing * $size;
      }
      &y-#{$i - 1} {
        #{$property}: $spacing * $size 0;
      }
    }
  }
}

//fontSetting
@mixin fontSetting($selector, $weight, $lineHeight, $transform) {
  #{$selector} {
    @include clamp($property:font-size, $axis: null, $values: fontSize("#{$selector}"));

    font-weight: fontWeight("#{$weight}");
    line-height: lineHeight("#{$lineHeight}");
    text-transform: $transform;

    span,
    b {
      font-weight: fontWeight("bold");
    }
  }
}

//customCSS
@mixin customClass($property, $parameter) {
  #{$property}: $parameter;
}
