//margin
@include config(m, margin, [0, .25, .5, 1, 1.5, 3], $spacer * 2);

//padding
@include config(p, padding, [0, .25, .5, 1, 1.5, 3], $spacer * 2);

//wrap
@mixin wrapParameters {
  padding: 0 $spacer * 2;
  margin: 0 auto;
  width: 100%;
  @content;
}

@mixin wrapConfig() {
  $sizes: [S, M, L];

  .wrap {
    @include wrapParameters {
      max-width: $wrap;
    }

    @for $i from 1 through length($sizes) {
      $size: nth($sizes, $i);

      &#{$i} {
        @include wrapParameters {
          max-width: $wrap#{$i};
        }
      }
    }
  }
}

@include wrapConfig();

//grid
@mixin gridParameters($min, $gapCol, $gapRow) {
  display: grid;
  width: 100%;
  grid-template-columns: repeat(auto-fit, minmax(min(100%, min(100%, #{$min}rem)), 1fr));
  grid-column-gap: #{$gapCol}rem;
  row-gap: #{$gapRow}rem;
}

@mixin columnConfig() {
  $sizes: [1, 2, 3, 4, 5, 6];
  $spacing: 1.5;

  .grid {
    @for $i from 1 through length($sizes) {
      $size: nth($sizes, $i);

      &-#{$i} {
        @include gridParameters(((20 - $i * $spacing) - ($i - $spacing)), 2, 2);
      }
    }
  }
}

@include columnConfig();

//row
.row {
  display: flex;
  flex-wrap: wrap;
  gap: $spacer * 4;
}

//columns
@mixin columnConfig() {
  $sizes: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  $spacing: 10%;
  $gap: $spacer * 4;

  @for $i from 1 through length($sizes) {
    $size: nth($sizes, $i);

    &-#{$i} {
      width: calc((#{$spacing} * #{$size}) - #{$gap});

      @include media-queries(xs) {
        width: 100%;
      }
    }
  }
}

.col {
  @include columnConfig();
}
